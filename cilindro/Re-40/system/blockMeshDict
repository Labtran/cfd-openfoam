/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Conversão de unidades
convertToMeters 1;

// D [m] do corpo cilíndrico
Diam 1;

// malha
Ntang 10;
Nnorm 20;
Nfront 30;
Nback 50;
Nz 1;

// dimensão de z
maxZ 0.5;		
minZ #calc "-1.0*$maxZ";

// R [m] do cilindro
radius          #calc "0.5*$Diam";
radiusNeg 	    #calc "-1.0*$radius";
Angle 		       45.0;
radAngle        #calc "degToRad($Angle)";

a               #calc "$radius*cos($radAngle)"; // Eixo x
aNeg            #calc "-1.0*$a";                // Eixo -x
b               #calc "$radius*sin($radAngle)"; // Eixo y
bNeg            #calc "-1.0*$b";                // Eixo -y

// R [m] do bloco
radiusBlock	    #calc "3.0*$radius";
radiusBlockNeg  #calc "-1.0*$radiusBlock";

c               #calc "$radiusBlock*cos($radAngle)"; // Eixo x
cNeg            #calc "-1.0*$c";                     // Eixo -x
d               #calc "$radiusBlock*sin($radAngle)"; // Eixo y 
dNeg            #calc "-1.0*$d";                     // Eixo -y

// dominio [m]
L               #calc "20.0*$radius"; // Eixo y  
LNeg            #calc "-1.0*$L";      // Eixo -y 
Lback           #calc "1.5*$L";       // Eixo x 
Lfront          #calc "-1.0*$L";      // Eixo -x 

// Arcos
halfAngle       #calc "($Angle)/2";
radHalfAngle    #calc "degToRad($halfAngle)";

// Cilindro
e               #calc "$radius*cos($radHalfAngle)"; // Eixo x
eNeg		    #calc "-1.0*$e";                    // Eixo -x
f               #calc "$radius*sin($radHalfAngle)"; // Eixo y 
fNeg		    #calc "-1.0*$f";                    // Eixo -y

// Bloco
g               #calc "$radiusBlock*cos($radHalfAngle)"; // Eixo x
gNeg            #calc "-1.0*$g";                         // Eixo -x
h               #calc "$radiusBlock*sin($radHalfAngle)"; // Eixo y 
hNeg            #calc "-1.0*$h";                         // Eixo -y


vertices
(
    //back up
    ($radius          0       $minZ)   //0
    ($radiusBlock     0       $minZ)   //1 
    ($Lback           0       $minZ)   //2   
    ($Lback           $d      $minZ)   //3 
    ($c               $d      $minZ)   //4
    ($a               $b      $minZ)   //5
    ($Lback           $L      $minZ)   //6  
    ($c               $L      $minZ)   //7
    (0                $L      $minZ)   //8 
    (0          $radiusBlock  $minZ)   //9
    (0             $radius    $minZ)   //10
    ($radiusNeg       0       $minZ)   //11
    ($radiusBlockNeg  0       $minZ)   //12 
    ($Lfront          0       $minZ)   //13
    ($Lfront          $d      $minZ)   //14
    ($cNeg            $d      $minZ)   //15
    ($aNeg            $b      $minZ)   //16
    ($Lfront          $L      $minZ)   //17
    ($cNeg            $L      $minZ)   //18
    
    //front up
    ($radius          0       $maxZ)   //19
    ($radiusBlock     0       $maxZ)   //20 
    ($Lback           0       $maxZ)   //21   
    ($Lback           $d      $maxZ)   //22 
    ($c               $d      $maxZ)   //23
    ($a               $b      $maxZ)   //24
    ($Lback           $L      $maxZ)   //25  
    ($c               $L      $maxZ)   //26
    (0                $L      $maxZ)   //27 
    (0           $radiusBlock $maxZ)   //28
    (0               $radius  $maxZ)   //29
    ($radiusNeg         0     $maxZ)   //30
    ($radiusBlockNeg    0     $maxZ)   //31 
    ($Lfront            0     $maxZ)   //32
    ($Lfront            $d    $maxZ)   //33
    ($cNeg              $d    $maxZ)   //34
    ($aNeg              $b    $maxZ)   //35
    ($Lfront            $L    $maxZ)   //36
    ($cNeg              $L    $maxZ)   //37
    
    //back down
    ($Lback           $dNeg        $minZ)  //38
    ($c               $dNeg        $minZ)  //39
    ($a               $bNeg        $minZ)  //40
    ($Lback           $LNeg        $minZ)  //41 
    ($c               $LNeg        $minZ)  //42
    (0                $LNeg        $minZ)  //43
    (0            $radiusBlockNeg  $minZ)  //44
    (0               $radiusNeg    $minZ)  //45
    ($Lfront           $dNeg       $minZ)  //46
    ($cNeg             $dNeg       $minZ)  //47
    ($aNeg             $bNeg       $minZ)  //48
    ($Lfront           $LNeg       $minZ)  //49
    ($cNeg             $LNeg       $minZ)  //50
    
    //front down
    ($Lback            $dNeg       $maxZ)  //51
    ($c                $dNeg       $maxZ)  //52
    ($a                $bNeg       $maxZ)  //53
    ($Lback            $LNeg       $maxZ)  //54 
    ($c                $LNeg       $maxZ)  //55
    (0                 $LNeg       $maxZ)  //56
    (0            $radiusBlockNeg  $maxZ)  //57
    (0               $radiusNeg    $maxZ)  //58
    ($Lfront           $dNeg       $maxZ)  //59
    ($cNeg             $dNeg       $maxZ)  //60
    ($aNeg             $bNeg       $maxZ)  //61
    ($Lfront           $LNeg       $maxZ)  //62
    ($cNeg             $LNeg       $maxZ)  //63
   
);

blocks
(
    //up
    hex (5 4 9 10 24 23 28 29)    ($Nnorm  $Ntang  $Nz) simpleGrading (2 1 1)     // A-A
    hex (0 1 4 5 19 20 23 24)     ($Nnorm  $Ntang  $Nz) simpleGrading (2 1 1)     // B-B
    hex (1 2 3 4 20 21 22 23)     ($Nback  $Ntang  $Nz) simpleGrading (6 1 1)     // C-C  
    hex (4 3 6 7 23 22 25 26)     ($Nback  $Nfront $Nz) simpleGrading (6 7 1)     // D-D 
    hex (9 4 7 8 28 23 26 27)     ($Ntang  $Nfront $Nz) simpleGrading (1 7 1)     // E-E
    hex (15 16 10 9 34 35 29 28)  ($Nnorm  $Ntang  $Nz) simpleGrading (0.5 1 1)   // F-F
    hex (12 11 16 15 31 30 35 34) ($Nnorm  $Ntang  $Nz) simpleGrading (0.5 1 1)   // G-G
    hex (13 12 15 14 32 31 34 33) ($Nfront $Ntang  $Nz) simpleGrading (0.15 1 1)  // H-H
    hex (14 15 18 17 33 34 37 36) ($Nfront $Nfront $Nz) simpleGrading (0.15 7 1)  // I-I
    hex (15 9 8 18 34 28 27 37)   ($Ntang  $Nfront $Nz) simpleGrading (1 7 1)     // J-J  
    
    //down
    hex (40 45 44 39 53 58 57 52) ($Ntang  $Nnorm  $Nz) simpleGrading (1 2 1)     // A-A 
    hex (0 40 39 1 19 53 52 20)   ($Ntang  $Nnorm  $Nz) simpleGrading (1 2 1)     // B-B   
    hex (1 39 38 2 20 52 51 21)   ($Ntang  $Nback  $Nz) simpleGrading (1 6 1)     // C-C  
    hex (39 42 41 38 52 55 54 51) ($Nfront $Nback  $Nz) simpleGrading (7 6 1)     // D-D   
    hex (44 43 42 39 57 56 55 52) ($Nfront $Ntang  $Nz) simpleGrading (7 1 1)     // E-E 
    hex (47 44 45 48 60 57 58 61) ($Ntang  $Nnorm  $Nz) simpleGrading (1 0.5 1)   // F-F
    hex (12 47 48 11 31 60 61 30) ($Ntang  $Nnorm  $Nz) simpleGrading (1 0.5 1)   // G-G
    hex (13 46 47 12 32 59 60 31) ($Ntang  $Nfront $Nz) simpleGrading (1 0.15 1)  // H-H 
    hex (46 49 50 47 59 62 63 60) ($Nfront $Nfront $Nz) simpleGrading (7 0.15 1)  // I-I  
    hex (47 50 43 44 60 63 56 57) ($Nfront $Ntang  $Nz) simpleGrading (7 1 1)     // J-J  
);




edges
(
    //up
    arc 0 5   ($e     $f $minZ)
    arc 5 10  ($f     $e $minZ)
    arc 19 24 ($e     $f $maxZ)
    arc 24 29 ($f     $e $maxZ)
    arc 11 16 ($eNeg  $f $minZ)
    arc 16 10 ($fNeg  $e $minZ)
    arc 30 35 ($eNeg  $f $maxZ)
    arc 35 29 ($fNeg  $e $maxZ)

    arc 1 4   ($g       $h   $minZ)
    arc 4 9   ($h       $g   $minZ)
    arc 20 23 ($g       $h   $maxZ)
    arc 23 28 ($h       $g   $maxZ)
    arc 12 15 ($gNeg    $h   $minZ)
    arc 15 9  ($hNeg    $g   $minZ)
    arc 31 34 ($gNeg    $h   $maxZ) 
    arc 34 28 ($hNeg    $g   $maxZ) 
     
    
    //down
    arc 0 40  ($e       $fNeg   $minZ)
    arc 40 45 ($f       $eNeg   $minZ)
    arc 19 53 ($e       $fNeg   $maxZ)
    arc 53 58 ($f       $eNeg   $maxZ)
    arc 11 48 ($eNeg 	$fNeg   $minZ)
    arc 48 45 ($fNeg 	$eNeg   $minZ)
    arc 30 61 ($eNeg 	$fNeg   $maxZ)
    arc 61 58 ($fNeg 	$eNeg   $maxZ)

    arc 1 39  ($g        $hNeg   $minZ)
    arc 39 44 ($h        $gNeg   $minZ)
    arc 20 52 ($g        $hNeg   $maxZ)
    arc 52 57 ($h        $gNeg   $maxZ) 
    arc 12 47 ($gNeg     $hNeg   $minZ)
    arc 47 44 ($hNeg     $gNeg   $minZ)
    arc 31 60 ($gNeg     $hNeg   $maxZ)
    arc 60 57 ($hNeg     $gNeg   $maxZ)  
      

);


patches
(
    patch in
    (
        //up
        (14 13 32 33)
        (17 14 33 36)
        //down
        (13 46 59 32) 
        (46 49 62 59) 
    
    )
    patch out
    (
        //up
        (2 3 22 21)
        (3 6 25 22)
        //down
        (38 2 21 51) 
        (41 38 51 54) 

    )
    wall cylinder
    (
        //up
        (10 5 24 29)
        (5 0 19 24)
        (16 10 29 35)
        (11 16 35 30)
        //down
        (40 45 58 53) 
        (0 40 53 19)  
        (45 48 61 58) 
        (48 11 30 61) 
    )
    symmetryPlane sym1
    (
        (7 8 27 26)
        (6 7 26 25)
        (8 18 37 27)
        (18 17 36 37)
    )
        
    symmetryPlane sym2
    (
        (43 42 55 56) 
        (42 41 54 55) 
        (50 43 56 63) 
        (49 50 63 62) 
    )
    empty back 
    (
       //up
       (5 10 9 4)
       (0 5 4 1)
       (1 4 3 2)
       (4 7 6 3)
       (9 8 7 4)
       (16 15 9 10)
       (11 12 15 16)
       (12 13 14 15)
       (14 17 18 15)
       (15 18 8 9)
       //down
       (45 40 39 44)
       (40 0 1 39)
       (1 2 38 39)
       (39 38 41 42)
       (44 39 42 43)
       (48 45 44 47)
       (11 48 47 12)
       (13 12 47 46)
       (46 47 50 49)
       (47 44 43 50)
    )
    empty front
    (
       //up
       (24 23 28 29)
       (20 23 24 19)
       (21 22 23 20)
       (22 25 26 23)
       (26 27 28 23)
       (28 34 35 29)
       (34 31 30 35)
       (33 32 31 34)
       (36 33 34 37)
       (37 34 28 27)
       //down
       (53 58 57 52)
       (19 53 52 20)
       (21 20 52 51)
       (51 52 55 54)
       (52 57 56 55)
       (58 61 60 57)
       (61 30 31 60)
       (31 32 59 60)
       (60 59 62 63)
       (57 60 63 56)
    )
);


mergePatchPairs
(
);

// ************************************************************************* //
